# Default values for semanticmediawiki.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: wirehead/semantic-mediawiki-docker
  tag: latest
  pullPolicy: IfNotPresent


## Specify imagePullSecrets
## ref: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
##
# imagePullSecrets: myregistrykey

nameOverride: ""
fullnameOverride: ""

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: mediawiki.local
      paths: []

  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

database:
  type: sqlite
  #host: database-host
  #user: postgres
  #password: password
  name: my_wiki
  #port: 5432
  #schema: mediawiki

extraEnvSecrets: []
  #- name: RCLONE_KEY_ID
  #  secret: secret
  #  key: rclone-key-id

# Extra configMaps to be mounted for things like backups
extraConfigmapMounts: 
  # - name: configmap
  #   mountPath: /usr/local/backup-scripts/
  #   configMap: backup-scripts
  #   readOnly: true
  #   defaultMode: 0755

wiki:
  path: http://127.0.0.1:8080
  user: admin
  password: password
  name: tst
  lang: en
  semanticRoot: http://www.example.com/
  uploads: false
  # See https://www.mediawiki.org/wiki/Manual:$wgSecretKey for details
  # This should be a 64 character hexidecimal string
  #secretKey: XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

## Use Existing secret instead of creating one
## It must have a secret-key key containing wiki.secretKey and a 
## database-password key containing database.password
# existingSecret: 'secret'

## Set to true to trigger a database provision (only helpful if the database is not sqlite)
provisionEnabled: false

probesEnabled: true

## Persist data to a persistent volume
persistence:
  enabled: false
  resourcePolicy:  # set resource-policy Helm annotation on PVC. Can be nil or "keep"

  ## A manually managed Persistent Volume and Claim
  ## Requires persistence.enabled: true
  ## If defined, PVC must be created manually before volume will be bound
  # existingClaim:

  ## database data Persistent Volume Storage Class
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  # storageClass: "-"
  accessMode: ReadWriteOnce
  size: 8Gi

  # annotations: {}

web:
  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

cron:
  enabled: true
  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

jobs:
  enabled: true
  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}
